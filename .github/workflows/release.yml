name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}

      - name: Check formatting
        run: deno fmt --check

      - name: Run linting
        run: deno lint

      - name: Check types
        run: deno check src/main.ts

      - name: Run tests
        run: deno test --allow-read --allow-run --allow-write --coverage

      - name: Generate coverage
        run: deno coverage --lcov > coverage.lcov

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: deno-mcp-server
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: deno-mcp-server.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: deno-mcp-server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Build binary
        run: |
          deno compile \
            --allow-read \
            --allow-write \
            --allow-run \
            --target ${{ matrix.target }} \
            --output dist/${{ matrix.binary }} \
            cli.ts

      - name: Create bundle
        if: matrix.os == 'ubuntu-latest'
        run: deno bundle mod.ts dist/bundle.js

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/${{ matrix.binary }}
            ${{ matrix.os == 'ubuntu-latest' && 'dist/bundle.js' || '' }}

  release:
    name: Release
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create checksums
        run: |
          cd dist
          find . -type f -exec sha256sum {} + > checksums.txt
          cat checksums.txt

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          if [[ -f CHANGELOG.md ]]; then
            awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release v${{ steps.version.outputs.version }}" > release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/**/*
          generate_release_notes: true

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Publish to JSR
        run: |
          # Publish to JSR registry
          deno publish --allow-slow-types
        env:
          DENO_AUTH_TOKEN: ${{ secrets.DENO_AUTH_TOKEN }}

  docker:
    name: Docker
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify
    needs: [release, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Notify success
        if: needs.release.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "✅ Release v${{ steps.version.outputs.version }} completed successfully!"
          echo "📦 Binaries: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
          echo "🐳 Docker: ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}"

      - name: Notify failure
        if: needs.release.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "❌ Release v${{ steps.version.outputs.version }} failed!"
          exit 1
